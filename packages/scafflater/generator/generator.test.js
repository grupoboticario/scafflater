/* eslint-disable no-undef */
const FileSystemUtils = require('fs-util')
const ConfigProvider = require('config-provider')
const Generator = require('./generator')

jest.mock('fs-util')

describe('Generator Tests', () => {
  afterEach(() => {
    jest.clearAllMocks()
    jest.restoreAllMocks()
  })
  test('Render a simple file', async () => {
    // ARRANJE
    FileSystemUtils.getDirTree.mockReturnValue({
      path: 'just/a/sample/test.txt',
      name: 'test.txt',
      size: 100,
      type: 'file',
      extension: '.txt',
    })
    const regionTemplate = `{{template.config.singleLineComment}} #scf-region
{{template.config.singleLineComment}} This code was generated by scafflater
{{template.config.singleLineComment}} @template {{template.name}} (v{{template.version}})
{{template.config.singleLineComment}} @partial {{partial.name}}
{{#each parameters}}
{{../template.config.singleLineComment}} @{{@key}} {{this}} 
{{/each}}

{{content}}

{{template.config.singleLineComment}} #end-scf-region`
    FileSystemUtils.getFile.mockImplementation(path => {
      if (path.endsWith('templates/scf-region.txt')) {
        return regionTemplate
      }

      return '{{parameters.test}}'
    })
    const ctx = {
      templatePath: '/template/path',
      template: {
        name: 'test-template',
        type: 'template',
        version: '0.0.1',
        config: {
          singleLineComment: '#',
        },
      },
      partialPath: '/source/path',
      partial: {
        name: '_init',
        type: 'init',
      },
      targetPath: '/target/path',
      parameters: {test: 'a sample test'},
      config: new ConfigProvider()
    }
    const generator = new Generator(ctx)

    // ACT
    await generator.generate()

    // ASSERT
    expect(FileSystemUtils.saveFile.mock.calls.length).toBe(1)
    expect(FileSystemUtils.saveFile.mock.calls[0][0]).toBe('/target/path/test.txt')
    expect(FileSystemUtils.saveFile.mock.calls[0][1]).toBe(`# @scf-region
# This code was generated by scafflater
# @template test-template (v0.0.1)
# @partial _init
# @test a sample test 

a sample test

# @end-scf-region`)
  })

  test('Render parameters in th folder and file paths', async () => {
    // ARRANJE
    FileSystemUtils.getDirTree.mockReturnValue(
      {
        path: 'the-partial-folder', // must be ignored
        name: 'the-partial-folder',
        size: 200,
        type: 'directory',
        children: [{
          path: '{{parameters.folderName}}',
          name: '{{parameters.folderName}}',
          size: 200,
          type: 'directory',
          children: [{
            path: '{{parameters.folderName}}/{{parameters.fileName}}.txt',
            name: '{{parameters.fileName}}.txt',
            size: 100,
            type: 'file',
            extension: '.txt',
          }],
        }],
      })
    FileSystemUtils.getFile.mockReturnValue('{{parameters.test}}')
    const ctx = {
      partialPath: '/source/path',
      partial: {
        name: '_init',
        type: 'init',
      },
      targetPath: '/target/path',
      parameters: {
        test: 'a sample test',
        folderName: 'folder-name',
        fileName: 'file-name',
      },
      templatePath: '/template/path',
      template: {
        name: 'test-template',
        type: 'template',
        version: '0.0.1',
      },
      config: { ...new ConfigProvider(), annotate: false }
    }
    const generator = new Generator(ctx)

    // ACT
    await generator.generate()

    // ASSERT
    expect(FileSystemUtils.saveFile.mock.calls.length).toBe(1)
    expect(FileSystemUtils.saveFile.mock.calls[0][0]).toBe('/target/path/folder-name/file-name.txt')
    expect(FileSystemUtils.saveFile.mock.calls[0][1]).toBe('a sample test')
  })

  test('Does not render empty paths', async () => {
    // ARRANJE
    FileSystemUtils.getDirTree.mockReturnValue(
      {
        path: '/container/folder',
        name: 'folder',
        size: 200,
        type: 'directory',
        children: [{
          path: '/container/folder/{{parameters.folderName}}',
          name: '{{parameters.folderName}}',
          size: 200,
          type: 'directory',
          children: [{
            path: '/container/folder/{{parameters.folderName}}/{{parameters.fileName}}.txt',
            name: '{{parameters.fileName}}.txt',
            size: 100,
            type: 'file',
            extension: '.txt',
          },
          {
            path: '/container/folder/{{parameters.folderName}}/{{#if parameters.shouldRenderFile}}{{parameters.fileName}}.txt{{/if}}',
            name: '{{#if parameters.shouldRenderFile}}{{parameters.fileName}}.txt{{/if}}',
            size: 100,
            type: 'file',
            extension: '.txt',
          },
          {
            path: '/container/folder/{{parameters.folderName}}/{{#if parameters.shouldRenderFolder}}another-folder{{/if}}',
            name: '{{#if parameters.shouldRenderFolder}}another-folder{{/if}}',
            size: 200,
            type: 'directory',
            children: [{
              path: '{{parameters.folderName}}/{{#if parameters.shouldRenderFolder}}another-folder{{/if}}/file.txt',
              name: 'file.txt',
              size: 100,
              type: 'file',
              extension: '.txt',
            }],
          }],
        }],
      })
    FileSystemUtils.getFile.mockReturnValue('{{parameters.test}}')
    const ctx = {
      partialPath: '/source/path',
      partial: {
        name: '_init',
        type: 'init',
      },
      targetPath: '/target/path',
      parameters: {
        test: 'a sample test',
        folderName: 'folder-name',
        fileName: 'file-name',
        shouldRenderFolder: false,
        shouldRenderFile: false,
      },
      templatePath: '/template/path',
      template: {
        name: 'test-template',
        type: 'template',
        version: '0.0.1',
      },
      config: { ...new ConfigProvider(), annotate: false }
    }
    const generator = new Generator(ctx)

    // ACT
    await generator.generate()

    // ASSERT
    expect(FileSystemUtils.saveFile.mock.calls.length).toBe(1)
    expect(FileSystemUtils.saveFile.mock.calls[0][0]).toBe('/target/path/folder-name/file-name.txt')
    expect(FileSystemUtils.saveFile.mock.calls[0][1]).toBe('a sample test')
  })
})
